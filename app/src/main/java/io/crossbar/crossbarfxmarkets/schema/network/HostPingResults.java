// automatically generated by the FlatBuffers compiler, do not modify

package io.crossbar.crossbarfxmarkets.schema.network;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class HostPingResults extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static HostPingResults getRootAsHostPingResults(ByteBuffer _bb) { return getRootAsHostPingResults(_bb, new HostPingResults()); }
  public static HostPingResults getRootAsHostPingResults(ByteBuffer _bb, HostPingResults obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public HostPingResults __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The task for which this ICMP ping result is for.
   */
  public int task(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int taskLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector taskVector() { return taskVector(new ByteVector()); }
  public ByteVector taskVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer taskAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer taskInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Samples: Point in time (UTC) when ICMP ping request was sent, in Unix time (ns precision).
   */
  public long timestamp(int j) { int o = __offset(6); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int timestampLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public LongVector timestampVector() { return timestampVector(new LongVector()); }
  public LongVector timestampVector(LongVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer timestampAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer timestampInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }
  /**
   * Samples: If status is ICMP_REPLY_SUCCESS, the round-trip time in ns.
   */
  public long rtt(int j) { int o = __offset(8); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int rttLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public LongVector rttVector() { return rttVector(new LongVector()); }
  public LongVector rttVector(LongVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer rttAsByteBuffer() { return __vector_as_bytebuffer(8, 8); }
  public ByteBuffer rttInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 8); }
  /**
   * Samples: ICMP reply message status.
   */
  public int status(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int statusLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector statusVector() { return statusVector(new ByteVector()); }
  public ByteVector statusVector(ByteVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer statusAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer statusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Samples: If status is ICMP_REPLY_UNREACHABLE, the ICMP error code.
   */
  public int code(int j) { int o = __offset(12); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int codeLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector codeVector() { return codeVector(new ByteVector()); }
  public ByteVector codeVector(ByteVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer codeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer codeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createHostPingResults(FlatBufferBuilder builder,
      int taskOffset,
      int timestampOffset,
      int rttOffset,
      int statusOffset,
      int codeOffset) {
    builder.startTable(5);
    HostPingResults.addCode(builder, codeOffset);
    HostPingResults.addStatus(builder, statusOffset);
    HostPingResults.addRtt(builder, rttOffset);
    HostPingResults.addTimestamp(builder, timestampOffset);
    HostPingResults.addTask(builder, taskOffset);
    return HostPingResults.endHostPingResults(builder);
  }

  public static void startHostPingResults(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addTask(FlatBufferBuilder builder, int taskOffset) { builder.addOffset(0, taskOffset, 0); }
  public static int createTaskVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createTaskVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startTaskVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTimestamp(FlatBufferBuilder builder, int timestampOffset) { builder.addOffset(1, timestampOffset, 0); }
  public static int createTimestampVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTimestampVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addRtt(FlatBufferBuilder builder, int rttOffset) { builder.addOffset(2, rttOffset, 0); }
  public static int createRttVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startRttVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(3, statusOffset, 0); }
  public static int createStatusVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createStatusVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startStatusVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addCode(FlatBufferBuilder builder, int codeOffset) { builder.addOffset(4, codeOffset, 0); }
  public static int createCodeVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createCodeVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startCodeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endHostPingResults(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public HostPingResults get(int j) { return get(new HostPingResults(), j); }
    public HostPingResults get(HostPingResults obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

