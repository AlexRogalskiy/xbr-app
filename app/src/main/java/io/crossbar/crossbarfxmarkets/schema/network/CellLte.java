// automatically generated by the FlatBuffers compiler, do not modify

package io.crossbar.crossbarfxmarkets.schema.network;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * LTE (4G) cell static information.
 * See also: https://developer.android.com/reference/android/telephony/CellIdentityLte
 */
public final class CellLte extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static CellLte getRootAsCellLte(ByteBuffer _bb) { return getRootAsCellLte(_bb, new CellLte()); }
  public static CellLte getRootAsCellLte(ByteBuffer _bb, CellLte obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CellLte __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Persistent (static) ID of the entity tracking cells.
   */
  public int entity(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int entityLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector entityVector() { return entityVector(new ByteVector()); }
  public ByteVector entityVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer entityAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer entityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * 28-bit Cell Identity.
   */
  public long cid() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Sample: point in time (UTC) when the cell information was first seen, in Unix time (ns precision).
   */
  public long timestamp() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * 3-digit Mobile Country Code, 0..999.
   */
  public String mcc() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mccAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer mccInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * 2 or 3-digit Mobile Network Code, 0..999.
   */
  public String mnc() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mncAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer mncInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Physical Cell Id 0..503.
   */
  public int pci() { int o = __offset(14); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  /**
   * 16-bit Tracking Area Code
   */
  public int tac() { int o = __offset(16); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  /**
   * Bands of the cell. Reference: 3GPP TS 36.101 section 5.5.
   */
  public int bands(int j) { int o = __offset(18); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int bandsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public ShortVector bandsVector() { return bandsVector(new ShortVector()); }
  public ShortVector bandsVector(ShortVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bandsAsByteBuffer() { return __vector_as_bytebuffer(18, 2); }
  public ByteBuffer bandsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 2); }
  /**
   * Cell bandwidth in kHz.
   */
  public long bandwidth() { int o = __offset(20); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * 18-bit Absolute RF Channel Number.
   */
  public long earfcn() { int o = __offset(22); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createCellLte(FlatBufferBuilder builder,
      int entityOffset,
      long cid,
      long timestamp,
      int mccOffset,
      int mncOffset,
      int pci,
      int tac,
      int bandsOffset,
      long bandwidth,
      long earfcn) {
    builder.startTable(10);
    CellLte.addTimestamp(builder, timestamp);
    CellLte.addEarfcn(builder, earfcn);
    CellLte.addBandwidth(builder, bandwidth);
    CellLte.addBands(builder, bandsOffset);
    CellLte.addMnc(builder, mncOffset);
    CellLte.addMcc(builder, mccOffset);
    CellLte.addCid(builder, cid);
    CellLte.addEntity(builder, entityOffset);
    CellLte.addTac(builder, tac);
    CellLte.addPci(builder, pci);
    return CellLte.endCellLte(builder);
  }

  public static void startCellLte(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addEntity(FlatBufferBuilder builder, int entityOffset) { builder.addOffset(0, entityOffset, 0); }
  public static int createEntityVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createEntityVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startEntityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addCid(FlatBufferBuilder builder, long cid) { builder.addInt(1, (int)cid, (int)0L); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(2, timestamp, 0L); }
  public static void addMcc(FlatBufferBuilder builder, int mccOffset) { builder.addOffset(3, mccOffset, 0); }
  public static void addMnc(FlatBufferBuilder builder, int mncOffset) { builder.addOffset(4, mncOffset, 0); }
  public static void addPci(FlatBufferBuilder builder, int pci) { builder.addShort(5, (short)pci, (short)0); }
  public static void addTac(FlatBufferBuilder builder, int tac) { builder.addShort(6, (short)tac, (short)0); }
  public static void addBands(FlatBufferBuilder builder, int bandsOffset) { builder.addOffset(7, bandsOffset, 0); }
  public static int createBandsVector(FlatBufferBuilder builder, short[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]); return builder.endVector(); }
  public static void startBandsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static void addBandwidth(FlatBufferBuilder builder, long bandwidth) { builder.addInt(8, (int)bandwidth, (int)0L); }
  public static void addEarfcn(FlatBufferBuilder builder, long earfcn) { builder.addInt(9, (int)earfcn, (int)0L); }
  public static int endCellLte(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CellLte get(int j) { return get(new CellLte(), j); }
    public CellLte get(CellLte obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

