// automatically generated by the FlatBuffers compiler, do not modify

package io.crossbar.crossbarfxmarkets.schema.network;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class HostPingResult extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static HostPingResult getRootAsHostPingResult(ByteBuffer _bb) { return getRootAsHostPingResult(_bb, new HostPingResult()); }
  public static HostPingResult getRootAsHostPingResult(ByteBuffer _bb, HostPingResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public HostPingResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The task for which this ICMP ping result is for.
   */
  public int task(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int taskLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector taskVector() { return taskVector(new ByteVector()); }
  public ByteVector taskVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer taskAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer taskInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Point in time (UTC) when ICMP ping request was sent, in Unix time (ns precision).
   */
  public long timestamp() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * If status is ICMP_REPLY_SUCCESS, the round-trip time in ns.
   */
  public long rtt() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * ICMP reply message status.
   */
  public int status() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * If status is ICMP_REPLY_UNREACHABLE, the ICMP error code.
   */
  public int code() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createHostPingResult(FlatBufferBuilder builder,
      int taskOffset,
      long timestamp,
      long rtt,
      int status,
      int code) {
    builder.startTable(5);
    HostPingResult.addRtt(builder, rtt);
    HostPingResult.addTimestamp(builder, timestamp);
    HostPingResult.addTask(builder, taskOffset);
    HostPingResult.addCode(builder, code);
    HostPingResult.addStatus(builder, status);
    return HostPingResult.endHostPingResult(builder);
  }

  public static void startHostPingResult(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addTask(FlatBufferBuilder builder, int taskOffset) { builder.addOffset(0, taskOffset, 0); }
  public static int createTaskVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createTaskVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startTaskVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(1, timestamp, 0L); }
  public static void addRtt(FlatBufferBuilder builder, long rtt) { builder.addLong(2, rtt, 0L); }
  public static void addStatus(FlatBufferBuilder builder, int status) { builder.addByte(3, (byte)status, (byte)0); }
  public static void addCode(FlatBufferBuilder builder, int code) { builder.addByte(4, (byte)code, (byte)0); }
  public static int endHostPingResult(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public HostPingResult get(int j) { return get(new HostPingResult(), j); }
    public HostPingResult get(HostPingResult obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

