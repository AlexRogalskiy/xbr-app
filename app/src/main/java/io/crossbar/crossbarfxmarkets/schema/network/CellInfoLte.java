// automatically generated by the FlatBuffers compiler, do not modify

package io.crossbar.crossbarfxmarkets.schema.network;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * LTE (4G) cell dynamic information.
 * See also:
 * * https://developer.android.com/reference/android/telephony/CellInfoLte
 * * https://developer.android.com/reference/android/telephony/CellSignalStrengthLte
 */
public final class CellInfoLte extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static CellInfoLte getRootAsCellInfoLte(ByteBuffer _bb) { return getRootAsCellInfoLte(_bb, new CellInfoLte()); }
  public static CellInfoLte getRootAsCellInfoLte(ByteBuffer _bb, CellInfoLte obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CellInfoLte __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Persistent (static) ID of the entity tracking cells.
   */
  public int entity(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int entityLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector entityVector() { return entityVector(new ByteVector()); }
  public ByteVector entityVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer entityAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer entityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * 28-bit Cell Identity.
   */
  public long cid() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Sample: point in time (UTC) when sample was measured, in Unix time (ns precision).
   */
  public long timestamp() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * The RSRP in ASU.
   */
  public long asuLevel() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Channel quality indicator
   */
  public long cqi() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Signal strength in dBm.
   */
  public long dbm() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Abstract level value for the overall signal quality.
   */
  public long level() { int o = __offset(16); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Reference signal received power in dBm.
   */
  public long rsrp() { int o = __offset(18); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Reference signal received quality.
   */
  public long rsrq() { int o = __offset(20); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Received Signal Strength Indication (RSSI) in dBm The value range is [-113, -51] inclusively or CellInfo#UNAVAILABLE if unavailable.
   */
  public long rssi() { int o = __offset(22); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Reference signal signal-to-noise ratio
   */
  public long rssnr() { int o = __offset(24); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * The timing advance value for LTE, as a value in range of 0..1282.
   */
  public long timingAdvance() { int o = __offset(26); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createCellInfoLte(FlatBufferBuilder builder,
      int entityOffset,
      long cid,
      long timestamp,
      long asu_level,
      long cqi,
      long dbm,
      long level,
      long rsrp,
      long rsrq,
      long rssi,
      long rssnr,
      long timing_advance) {
    builder.startTable(12);
    CellInfoLte.addTimestamp(builder, timestamp);
    CellInfoLte.addTimingAdvance(builder, timing_advance);
    CellInfoLte.addRssnr(builder, rssnr);
    CellInfoLte.addRssi(builder, rssi);
    CellInfoLte.addRsrq(builder, rsrq);
    CellInfoLte.addRsrp(builder, rsrp);
    CellInfoLte.addLevel(builder, level);
    CellInfoLte.addDbm(builder, dbm);
    CellInfoLte.addCqi(builder, cqi);
    CellInfoLte.addAsuLevel(builder, asu_level);
    CellInfoLte.addCid(builder, cid);
    CellInfoLte.addEntity(builder, entityOffset);
    return CellInfoLte.endCellInfoLte(builder);
  }

  public static void startCellInfoLte(FlatBufferBuilder builder) { builder.startTable(12); }
  public static void addEntity(FlatBufferBuilder builder, int entityOffset) { builder.addOffset(0, entityOffset, 0); }
  public static int createEntityVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createEntityVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startEntityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addCid(FlatBufferBuilder builder, long cid) { builder.addInt(1, (int)cid, (int)0L); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(2, timestamp, 0L); }
  public static void addAsuLevel(FlatBufferBuilder builder, long asuLevel) { builder.addInt(3, (int)asuLevel, (int)0L); }
  public static void addCqi(FlatBufferBuilder builder, long cqi) { builder.addInt(4, (int)cqi, (int)0L); }
  public static void addDbm(FlatBufferBuilder builder, long dbm) { builder.addInt(5, (int)dbm, (int)0L); }
  public static void addLevel(FlatBufferBuilder builder, long level) { builder.addInt(6, (int)level, (int)0L); }
  public static void addRsrp(FlatBufferBuilder builder, long rsrp) { builder.addInt(7, (int)rsrp, (int)0L); }
  public static void addRsrq(FlatBufferBuilder builder, long rsrq) { builder.addInt(8, (int)rsrq, (int)0L); }
  public static void addRssi(FlatBufferBuilder builder, long rssi) { builder.addInt(9, (int)rssi, (int)0L); }
  public static void addRssnr(FlatBufferBuilder builder, long rssnr) { builder.addInt(10, (int)rssnr, (int)0L); }
  public static void addTimingAdvance(FlatBufferBuilder builder, long timingAdvance) { builder.addInt(11, (int)timingAdvance, (int)0L); }
  public static int endCellInfoLte(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CellInfoLte get(int j) { return get(new CellInfoLte(), j); }
    public CellInfoLte get(CellInfoLte obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

