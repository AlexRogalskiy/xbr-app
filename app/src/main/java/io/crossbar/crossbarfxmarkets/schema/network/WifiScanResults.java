// automatically generated by the FlatBuffers compiler, do not modify

package io.crossbar.crossbarfxmarkets.schema.network;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * A series of location samples.
 */
public final class WifiScanResults extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static WifiScanResults getRootAsWifiScanResults(ByteBuffer _bb) { return getRootAsWifiScanResults(_bb, new WifiScanResults()); }
  public static WifiScanResults getRootAsWifiScanResults(ByteBuffer _bb, WifiScanResults obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public WifiScanResults __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Persistent (static) ID of the entity tracking its location.
   */
  public int entity(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int entityLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector entityVector() { return entityVector(new ByteVector()); }
  public ByteVector entityVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer entityAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer entityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Samples: point in time (UTC) when sample was measured, in Unix time (ns precision).
   */
  public long timestamp(int j) { int o = __offset(6); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int timestampLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public LongVector timestampVector() { return timestampVector(new LongVector()); }
  public LongVector timestampVector(LongVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer timestampAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer timestampInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }
  /**
   * The address of the access point.
   */
  public String bssid(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int bssidLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector bssidVector() { return bssidVector(new StringVector()); }
  public StringVector bssidVector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The network name.
   */
  public String ssid(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ssidLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public StringVector ssidVector() { return ssidVector(new StringVector()); }
  public StringVector ssidVector(StringVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The primary 20 MHz frequency (in MHz) of the channel over which the client is communicating with the access point.
   */
  public long channelFrequency(int j) { int o = __offset(12); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int channelFrequencyLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public IntVector channelFrequencyVector() { return channelFrequencyVector(new IntVector()); }
  public IntVector channelFrequencyVector(IntVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer channelFrequencyAsByteBuffer() { return __vector_as_bytebuffer(12, 4); }
  public ByteBuffer channelFrequencyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 4); }
  /**
   * AP Channel bandwidth.
   */
  public int channelWidth(int j) { int o = __offset(14); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int channelWidthLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector channelWidthVector() { return channelWidthVector(new ByteVector()); }
  public ByteVector channelWidthVector(ByteVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer channelWidthAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer channelWidthInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The detected signal level in dBm.
   */
  public int rssi(int j) { int o = __offset(16); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int rssiLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ShortVector rssiVector() { return rssiVector(new ShortVector()); }
  public ShortVector rssiVector(ShortVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer rssiAsByteBuffer() { return __vector_as_bytebuffer(16, 2); }
  public ByteBuffer rssiInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 2); }
  /**
   * Indicates Passpoint operator name published by access point; only available on Passpoint network and if published by access point.
   */
  public String passpointOperator(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int passpointOperatorLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector passpointOperatorVector() { return passpointOperatorVector(new StringVector()); }
  public StringVector passpointOperatorVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Indicates venue name (such as 'San Francisco Airport') published by access point; only available on Passpoint network and if published by access point.
   */
  public String passpointVenue(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int passpointVenueLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector passpointVenueVector() { return passpointVenueVector(new StringVector()); }
  public StringVector passpointVenueVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createWifiScanResults(FlatBufferBuilder builder,
      int entityOffset,
      int timestampOffset,
      int bssidOffset,
      int ssidOffset,
      int channel_frequencyOffset,
      int channel_widthOffset,
      int rssiOffset,
      int passpoint_operatorOffset,
      int passpoint_venueOffset) {
    builder.startTable(9);
    WifiScanResults.addPasspointVenue(builder, passpoint_venueOffset);
    WifiScanResults.addPasspointOperator(builder, passpoint_operatorOffset);
    WifiScanResults.addRssi(builder, rssiOffset);
    WifiScanResults.addChannelWidth(builder, channel_widthOffset);
    WifiScanResults.addChannelFrequency(builder, channel_frequencyOffset);
    WifiScanResults.addSsid(builder, ssidOffset);
    WifiScanResults.addBssid(builder, bssidOffset);
    WifiScanResults.addTimestamp(builder, timestampOffset);
    WifiScanResults.addEntity(builder, entityOffset);
    return WifiScanResults.endWifiScanResults(builder);
  }

  public static void startWifiScanResults(FlatBufferBuilder builder) { builder.startTable(9); }
  public static void addEntity(FlatBufferBuilder builder, int entityOffset) { builder.addOffset(0, entityOffset, 0); }
  public static int createEntityVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createEntityVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startEntityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTimestamp(FlatBufferBuilder builder, int timestampOffset) { builder.addOffset(1, timestampOffset, 0); }
  public static int createTimestampVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTimestampVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addBssid(FlatBufferBuilder builder, int bssidOffset) { builder.addOffset(2, bssidOffset, 0); }
  public static int createBssidVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBssidVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSsid(FlatBufferBuilder builder, int ssidOffset) { builder.addOffset(3, ssidOffset, 0); }
  public static int createSsidVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSsidVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addChannelFrequency(FlatBufferBuilder builder, int channelFrequencyOffset) { builder.addOffset(4, channelFrequencyOffset, 0); }
  public static int createChannelFrequencyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startChannelFrequencyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addChannelWidth(FlatBufferBuilder builder, int channelWidthOffset) { builder.addOffset(5, channelWidthOffset, 0); }
  public static int createChannelWidthVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createChannelWidthVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startChannelWidthVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addRssi(FlatBufferBuilder builder, int rssiOffset) { builder.addOffset(6, rssiOffset, 0); }
  public static int createRssiVector(FlatBufferBuilder builder, short[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]); return builder.endVector(); }
  public static void startRssiVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static void addPasspointOperator(FlatBufferBuilder builder, int passpointOperatorOffset) { builder.addOffset(7, passpointOperatorOffset, 0); }
  public static int createPasspointOperatorVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPasspointOperatorVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPasspointVenue(FlatBufferBuilder builder, int passpointVenueOffset) { builder.addOffset(8, passpointVenueOffset, 0); }
  public static int createPasspointVenueVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPasspointVenueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endWifiScanResults(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public WifiScanResults get(int j) { return get(new WifiScanResults(), j); }
    public WifiScanResults get(WifiScanResults obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

