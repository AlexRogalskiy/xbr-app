// automatically generated by the FlatBuffers compiler, do not modify

package io.crossbar.crossbarfxmarkets.schema.climate;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * A series of climate samples.
 */
public final class ClimateSeries extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static ClimateSeries getRootAsClimateSeries(ByteBuffer _bb) { return getRootAsClimateSeries(_bb, new ClimateSeries()); }
  public static ClimateSeries getRootAsClimateSeries(ByteBuffer _bb, ClimateSeries obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ClimateSeries __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Persistent (static) ID of the entity (device owned by person) tracking its surrounding climate.
   */
  public int entity(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int entityLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector entityVector() { return entityVector(new ByteVector()); }
  public ByteVector entityVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer entityAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer entityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Samples: point in time (UTC) when sample was measured, in Unix time (ns precision).
   */
  public long timestamp(int j) { int o = __offset(6); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int timestampLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public LongVector timestampVector() { return timestampVector(new LongVector()); }
  public LongVector timestampVector(LongVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer timestampAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer timestampInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }
  /**
   * Samples: surrounding environment ambient temperature (in degrees Celsius).
   */
  public double temperature(int j) { int o = __offset(8); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int temperatureLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector temperatureVector() { return temperatureVector(new DoubleVector()); }
  public DoubleVector temperatureVector(DoubleVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer temperatureAsByteBuffer() { return __vector_as_bytebuffer(8, 8); }
  public ByteBuffer temperatureInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 8); }
  /**
   * Samples: surrounding environment atmospheric pressure (in hPa).
   */
  public double pressure(int j) { int o = __offset(10); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int pressureLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector pressureVector() { return pressureVector(new DoubleVector()); }
  public DoubleVector pressureVector(DoubleVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer pressureAsByteBuffer() { return __vector_as_bytebuffer(10, 8); }
  public ByteBuffer pressureInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 8); }
  /**
   * Samples: surrounding environment relative humidity (in %).
   */
  public double humidity(int j) { int o = __offset(12); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int humidityLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector humidityVector() { return humidityVector(new DoubleVector()); }
  public DoubleVector humidityVector(DoubleVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer humidityAsByteBuffer() { return __vector_as_bytebuffer(12, 8); }
  public ByteBuffer humidityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 8); }

  public static int createClimateSeries(FlatBufferBuilder builder,
      int entityOffset,
      int timestampOffset,
      int temperatureOffset,
      int pressureOffset,
      int humidityOffset) {
    builder.startTable(5);
    ClimateSeries.addHumidity(builder, humidityOffset);
    ClimateSeries.addPressure(builder, pressureOffset);
    ClimateSeries.addTemperature(builder, temperatureOffset);
    ClimateSeries.addTimestamp(builder, timestampOffset);
    ClimateSeries.addEntity(builder, entityOffset);
    return ClimateSeries.endClimateSeries(builder);
  }

  public static void startClimateSeries(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addEntity(FlatBufferBuilder builder, int entityOffset) { builder.addOffset(0, entityOffset, 0); }
  public static int createEntityVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createEntityVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startEntityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTimestamp(FlatBufferBuilder builder, int timestampOffset) { builder.addOffset(1, timestampOffset, 0); }
  public static int createTimestampVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTimestampVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addTemperature(FlatBufferBuilder builder, int temperatureOffset) { builder.addOffset(2, temperatureOffset, 0); }
  public static int createTemperatureVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startTemperatureVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addPressure(FlatBufferBuilder builder, int pressureOffset) { builder.addOffset(3, pressureOffset, 0); }
  public static int createPressureVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startPressureVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addHumidity(FlatBufferBuilder builder, int humidityOffset) { builder.addOffset(4, humidityOffset, 0); }
  public static int createHumidityVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startHumidityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endClimateSeries(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ClimateSeries get(int j) { return get(new ClimateSeries(), j); }
    public ClimateSeries get(ClimateSeries obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

