// automatically generated by the FlatBuffers compiler, do not modify

package io.crossbar.crossbarfxmarkets.schema.network;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class HostPingTask extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static HostPingTask getRootAsHostPingTask(ByteBuffer _bb) { return getRootAsHostPingTask(_bb, new HostPingTask()); }
  public static HostPingTask getRootAsHostPingTask(ByteBuffer _bb, HostPingTask obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public HostPingTask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int task(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int taskLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector taskVector() { return taskVector(new ByteVector()); }
  public ByteVector taskVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer taskAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer taskInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long started() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createHostPingTask(FlatBufferBuilder builder,
      int taskOffset,
      long started) {
    builder.startTable(2);
    HostPingTask.addStarted(builder, started);
    HostPingTask.addTask(builder, taskOffset);
    return HostPingTask.endHostPingTask(builder);
  }

  public static void startHostPingTask(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTask(FlatBufferBuilder builder, int taskOffset) { builder.addOffset(0, taskOffset, 0); }
  public static int createTaskVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createTaskVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startTaskVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addStarted(FlatBufferBuilder builder, long started) { builder.addLong(1, started, 0L); }
  public static int endHostPingTask(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public HostPingTask get(int j) { return get(new HostPingTask(), j); }
    public HostPingTask get(HostPingTask obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

