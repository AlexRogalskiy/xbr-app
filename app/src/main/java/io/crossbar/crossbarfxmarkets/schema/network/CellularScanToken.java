// automatically generated by the FlatBuffers compiler, do not modify

package io.crossbar.crossbarfxmarkets.schema.network;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CellularScanToken extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static CellularScanToken getRootAsCellularScanToken(ByteBuffer _bb) { return getRootAsCellularScanToken(_bb, new CellularScanToken()); }
  public static CellularScanToken getRootAsCellularScanToken(ByteBuffer _bb, CellularScanToken obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CellularScanToken __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int token(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int tokenLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector tokenVector() { return tokenVector(new ByteVector()); }
  public ByteVector tokenVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer tokenAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer tokenInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long created() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long expires() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createCellularScanToken(FlatBufferBuilder builder,
      int tokenOffset,
      long created,
      long expires) {
    builder.startTable(3);
    CellularScanToken.addExpires(builder, expires);
    CellularScanToken.addCreated(builder, created);
    CellularScanToken.addToken(builder, tokenOffset);
    return CellularScanToken.endCellularScanToken(builder);
  }

  public static void startCellularScanToken(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addToken(FlatBufferBuilder builder, int tokenOffset) { builder.addOffset(0, tokenOffset, 0); }
  public static int createTokenVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createTokenVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startTokenVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addCreated(FlatBufferBuilder builder, long created) { builder.addLong(1, created, 0L); }
  public static void addExpires(FlatBufferBuilder builder, long expires) { builder.addLong(2, expires, 0L); }
  public static int endCellularScanToken(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CellularScanToken get(int j) { return get(new CellularScanToken(), j); }
    public CellularScanToken get(CellularScanToken obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

