// automatically generated by the FlatBuffers compiler, do not modify

package io.crossbar.crossbarfxmarkets.schema.climate;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * A single climate sample.
 */
public final class Climate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Climate getRootAsClimate(ByteBuffer _bb) { return getRootAsClimate(_bb, new Climate()); }
  public static Climate getRootAsClimate(ByteBuffer _bb, Climate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Climate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Persistent (static) ID of the entity (device owned by person) tracking its surrounding climate.
   */
  public int entity(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int entityLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector entityVector() { return entityVector(new ByteVector()); }
  public ByteVector entityVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer entityAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer entityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Sample: point in time (UTC) when sample was measured, in Unix time (ns precision).
   */
  public long timestamp() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * Surrounding environment ambient temperature (in degrees Celsius).
   */
  public double temperature() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Surrounding environment atmospheric pressure (in hPa).
   */
  public double pressure() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Surrounding environment relative humidity (in %).
   */
  public double humidity() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createClimate(FlatBufferBuilder builder,
      int entityOffset,
      long timestamp,
      double temperature,
      double pressure,
      double humidity) {
    builder.startTable(5);
    Climate.addHumidity(builder, humidity);
    Climate.addPressure(builder, pressure);
    Climate.addTemperature(builder, temperature);
    Climate.addTimestamp(builder, timestamp);
    Climate.addEntity(builder, entityOffset);
    return Climate.endClimate(builder);
  }

  public static void startClimate(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addEntity(FlatBufferBuilder builder, int entityOffset) { builder.addOffset(0, entityOffset, 0); }
  public static int createEntityVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createEntityVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startEntityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(1, timestamp, 0L); }
  public static void addTemperature(FlatBufferBuilder builder, double temperature) { builder.addDouble(2, temperature, 0.0); }
  public static void addPressure(FlatBufferBuilder builder, double pressure) { builder.addDouble(3, pressure, 0.0); }
  public static void addHumidity(FlatBufferBuilder builder, double humidity) { builder.addDouble(4, humidity, 0.0); }
  public static int endClimate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Climate get(int j) { return get(new Climate(), j); }
    public Climate get(Climate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

