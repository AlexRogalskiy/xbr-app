///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2019 Crossbar.io Technologies GmbH and contributors.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
///////////////////////////////////////////////////////////////////////////////


/*

time: uint64;
lon: double;
lat: double;



on_tile_move
on_tile_enter
on_tile_leave

// zoom level: [0, 20]

https://wiki.openstreetmap.org/wiki/Zoom_levels
https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Resolution_and_Scale
https://wiki.openstreetmap.org/wiki/Tile_disk_usage

// <zoom>.<xtile>.<ytile>


precision (for storage and transmission):
  rounded to 7 decimals
  effectively 100 nano grad (better than 11mm)
  "centimetric precision"

https://wiki.openstreetmap.org/wiki/Node
https://wiki.openstreetmap.org/wiki/Converting_to_WGS84
https://wiki.openstreetmap.org/wiki/Precision_of_coordinates
https://wiki.openstreetmap.org/wiki/Altitude

10 m 	4
1 m 	5
0,1 m 	6


payload = {
    'timestamp': timestamp,
    'lon': lon,
    'lat': lat,
    'alt': alt
}


zoom
sample period
batch duration

    /// Period (uniform) between samples taken in ms.
    period: uint32;

*/


//
// Example application level use of Flatbuffers with WAMP.
//

include "wamp.fbs";

/// Our location API lives in this namespace.
namespace location;


/// One location sample.
struct LocationSample
{
    /// WGS84 longitude, rounded to 7 decimals.
    lon: double;

    /// WGS84 latitude, rounded to 7 decimals.
    lat: double;
}

/// A series of location samples.
table LocationSeries
{
    /// Point in time (UTC) when sample batch was recorded (start thereof) in Unix time (ns precision).
    start: uint64;

    /// Sample batch with locations.
    samples: [LocationSample];
}

/// Define an interface for accelerometer storage services.
rpc_service Location (type: "interface",
                      uuid: "4b740947-31d5-4a10-b7ce-4149bbc9ee1e")
{
    /// Event fired when a sample batch was stored. The time range
    /// of the stored samples is provided as event payload.
    on_location (LocationSeries): Void (type: "topic");
}
