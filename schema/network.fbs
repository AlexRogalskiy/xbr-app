///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Crossbar.io Technologies GmbH and contributors.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
///////////////////////////////////////////////////////////////////////////////


/// Include common definitions for WAMP.
include "wamp.fbs";

/// Our network API lives in this namespace.
namespace network;


/// Wifi channel widths.
enum WifiChannelWidth: uint8
{
    CHANNEL_WIDTH_NONE,
    CHANNEL_WIDTH_20MHZ,
    CHANNEL_WIDTH_40MHZ,
    CHANNEL_WIDTH_80MHZ,
    CHANNEL_WIDTH_160MHZ,
    CHANNEL_WIDTH_80MHZ_PLUS_MHZ
}


/// A single location sample (mostly for on_tile_enter/on_tile_leave).
/// See also: https://developer.android.com/reference/android/net/wifi/ScanResult
table WifiScanResult
{
    /// Persistent (static) ID of the entity tracking its location.
    entity: [uint8] (uuid);

    /// Sample: point in time (UTC) when sample was measured, in Unix time (ns precision).
    timestamp: uint64;

    /// The address of the access point.
    bssid: string;

    /// The network name.
    ssid: string;

    /// The primary 20 MHz frequency (in MHz) of the channel over which the client is communicating with the access point.
    channel_frequency: uint32;

    /// AP Channel bandwidth.
    channel_width: WifiChannelWidth;

    /// The detected signal level in dBm.
    rssi: uint16;

    /// Indicates Passpoint operator name published by access point; only available on Passpoint network and if published by access point.
    passpoint_operator: string;

    /// Indicates venue name (such as 'San Francisco Airport') published by access point; only available on Passpoint network and if published by access point.
    passpoint_venue: string;
}


/// A series of location samples.
table WifiScanResults
{
    /// Persistent (static) ID of the entity tracking its location.
    entity: [uint8] (uuid);

    /// Samples: point in time (UTC) when sample was measured, in Unix time (ns precision).
    timestamp: [uint64];

    /// The address of the access point.
    bssid: [string];

    /// The network name.
    ssid: [string];

    /// The primary 20 MHz frequency (in MHz) of the channel over which the client is communicating with the access point.
    channel_frequency: [uint32];

    /// AP Channel bandwidth.
    channel_width: [WifiChannelWidth];

    /// The detected signal level in dBm.
    rssi: [uint16];

    /// Indicates Passpoint operator name published by access point; only available on Passpoint network and if published by access point.
    passpoint_operator: [string];

    /// Indicates venue name (such as 'San Francisco Airport') published by access point; only available on Passpoint network and if published by access point.
    passpoint_venue: [string];
}

table CellInfoGsm
{

}

table CellInfoCdma
{

}

table CellInfoTdscdma
{

}

table CellInfoLte
{

}

table CellInfoWcdma
{

}

table CellularScanResult
{
    /// Persistent (static) ID of the entity tracking its location.
    entity: [uint8] (uuid);

    /// Sample: point in time (UTC) when sample was measured, in Unix time (ns precision).
    timestamp: uint64;
}

/// A series of location samples.
table CellularScanResults
{
    /// Persistent (static) ID of the entity tracking its location.
    entity: [uint8] (uuid);

    /// Samples: point in time (UTC) when sample was measured, in Unix time (ns precision).
    timestamp: [uint64];
}


/**
 * XBR interface for cellular and Wifi network data services.
 *
 * See also: https://developer.android.com/reference/android/net/wifi/WifiManager
 */
rpc_service Network (type: "interface",
                     uuid: "52947dc1-b59c-4859-942e-cedefcda6435")
{
    /// Return a list of access points found in the most recent scan.
    /// See also: https://developer.android.com/reference/android/net/wifi/WifiManager#getScanResults()
    get_wifi_scan_results (Void): WifiScanResults (type: "procedure");

    // "This method was deprecated in API level 28.":
    // https://developer.android.com/reference/android/net/wifi/WifiManager#startScan()
    // "Status: Won't Fix (Intended Behavior)":
    // https://issuetracker.google.com/issues/112688545#comment90
    // start_wifi_scan (): Void (type: "procedure");

    // https://developer.android.com/reference/android/net/ConnectivityManager
    // https://developer.android.com/reference/android/telephony/NetworkScan
    // https://developer.android.com/reference/android/telephony/TelephonyManager#getAllCellInfo()
    get_cellular_scan_results (Void): CellularScanResults (type: "procedure");

    // https://source.android.com/devices/sensors/batching?hl=en
    // https://source.android.com/devices/sensors/report-modes#continuous
}
